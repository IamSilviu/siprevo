//
// Marks description rules:
//
// PATH -> Range [= VARNAME [, LOOKUP=0 [, BEGINOFFSET=0]]];
//
// PATH -> LookupRange [= VARNAME];                     // Syntax sugar ==>> Range VARNAME, 1, -1;
//
// PATH -> ContinueRange = VARNAME;
//
// PATH -> BeginRange = VARNAME, MARKNFASTATE=AtBegin, OFFSET=0;
// PATH -> EndRange = VARNAME, MARKNFASTATE=AtEnd, OFFSET=0;
// PATH -> EndRangeIfInvalid = VARNAME, MARKNFASTATE=AtEnd, OFFSET=0;
//
// PATH -> Reset [= VARNAME]           // this mark will reset range or struct to empty value
// PATH -> ResetIfInvalid [= VARNAME]  // this reset range begin if end is invalid
//
//
// PATH -> Decimal [= VARNAME];
// PATH -> Hex [= VARNAME];
//
// PATH -> Const [= VARNAME [, CONSTVALUE [, PRIORITY=10]]];
//
// PATH -> Bool [= VARNAME];
// PATH -> BoolEx [= VARNAME];
// PATH -> BoolExNot [= VARNAME];
//
// PATH -> Count = COUNTNAME [, MAXVALUE=10 [, INITIALVALUE=0]];
//
// PATH -> Group = SUBSTITION, GROUPNAME
//
//   VARNAME is pathname to variable, e.g. SomeStruct.NestedStruct.NestedStruct2.VarName
//   VARNAME may include global struct description, e.g. StructVarName<GlobalStructType>.VarName
//   VARNAME may include references to array var, e.g. VarName[CountName] or Struct[CountName].VarName
//
// Group description:
//
// .GROUPNAME.extra.path -> ANY DESCRIPTION;
//   ANY DESCRIPTION may contain ? simbol, it will be replaced by SUBSTITION from Group rule. 
//   A group's definition MUST precede its use.
//
// One line could have several rules:
//
// PATH -> RULE1; RULE2; RULE3;
//

//
// -------------------------------------------------------------------------------[ .HOSTPORT
//
.HOSTPORT.host -> Range = ?<Hostport>.Host;
.HOSTPORT.port.DIGIT -> Decimal = ?<Hostport>.Port;

//
// -------------------------------------------------------------------------------[ .ADDRSPEC
//
.ADDRSPEC.SIP-URI.sip: -> Const = ?<Addrspec>.UriScheme, Sip;
.ADDRSPEC.SIPS-URI.sips: -> Const = ?<Addrspec>.UriScheme, Sips;
.ADDRSPEC.absoluteURI.: -> Const = ?<Addrspec>.UriScheme, Absolute, 20;
.ADDRSPEC.SIP-URI.userinfo.user -> BeginRange = ?<Addrspec>.User, AtBegin, 0;
.ADDRSPEC.SIP-URI.userinfo.: -> Custom = ?<Addrspec>.User, End, "if(Var.End<0) Var.End=-i+1;";
.ADDRSPEC.SIPS-URI.userinfo.user -> BeginRange = ?<Addrspec>.User, AtBegin, 0;
.ADDRSPEC.SIPS-URI.userinfo.: -> Custom = ?<Addrspec>.User, End, "if(Var.End<0) Var.End=-i+1;";
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.ms-received-cid-param.pvalue -> Range = ?<Addrspec>.MsReceivedCid;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.ms-received-cid-param.pvalue -> Range = ?<Addrspec>.MsReceivedCid;
.ADDRSPEC.SIP-URI.hostport -> Group = ?<Addrspec>.Hostport, HOSTPORT;
.ADDRSPEC.SIPS-URI.hostport -> Group = ?<Addrspec>.Hostport, HOSTPORT;
.ADDRSPEC.SIP-URI.userinfo.@ -> Reset = ?<Addrspec>.Hostport; Custom = ?<Addrspec>.User, End, "if(Var.End>int.MinValue && Var.End<0) Var.End=-Var.End; else Var.End=i-1;";
.ADDRSPEC.SIPS-URI.userinfo.@ -> Reset = ?<Addrspec>.Hostport; Custom = ?<Addrspec>.User, End, "if(Var.End>int.MinValue && Var.End<0) Var.End=-Var.End; else Var.End=i-1;";
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.transport-param.udp -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.transport-param.tcp -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.transport-param.sctp -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.transport-param.tls -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.transport-param.other-transport -> Const = ?<Addrspec>.Transport, Other, 20;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.transport-param.udp -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.transport-param.tcp -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.transport-param.sctp -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.transport-param.tls -> Const = ?<Addrspec>.Transport;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.transport-param.other-transport -> Const = ?<Addrspec>.Transport, Other, 20;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.maddr-param.host -> Range = ?<Addrspec>.Maddr;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.maddr-param.host -> Range = ?<Addrspec>.Maddr;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.lr-param.lr -> BoolEx = ?<Addrspec>.HasLr;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.lr-param.lr -> BoolEx = ?<Addrspec>.HasLr;
.ADDRSPEC.SIP-URI.uri-parameters.uri-parameter.other-param.pname -> BoolExNot = ?<Addrspec>.HasLr;
.ADDRSPEC.SIPS-URI.uri-parameters.uri-parameter.other-param.pname -> BoolExNot = ?<Addrspec>.HasLr;
.ADDRSPEC -> Range = ?<Addrspec>.Value;

//
// -------------------------------------------------------------------------------[ .FROMTO
//
.FROMTO.name-addr.addr-spec -> Group = ?<Fromto>.AddrSpec1, ADDRSPEC;
.FROMTO.addr-spec -> Group = ?<Fromto>.AddrSpec2, ADDRSPEC;
.FROMTO.from-param.tag-param.token -> LookupRange = ?<Fromto>.Tag;
.FROMTO.to-param.tag-param.token -> LookupRange = ?<Fromto>.Tag;
.FROMTO.from-param.epid-param.epid-param-value -> LookupRange = ?<Fromto>.Epid;
.FROMTO.to-param.epid-param.epid-param-value -> LookupRange = ?<Fromto>.Epid;

//
// -------------------------------------------------------------------------------[ .METHOD
//
.METHOD.INVITEm -> Const = ?Method;
.METHOD.ACKm -> Const = ?Method;
.METHOD.OPTIONSm -> Const = ?Method;
.METHOD.BYEm -> Const = ?Method;
.METHOD.CANCELm -> Const = ?Method;
.METHOD.REGISTERm -> Const = ?Method;
.METHOD.extension-method.SUBSCRIBEm -> Const = ?Method;
.METHOD.extension-method.NOTIFYm -> Const = ?Method;
.METHOD.extension-method.SERVICEm -> Const = ?Method;
.METHOD.extension-method.BENOTIFYm -> Const = ?Method;
.METHOD.extension-method.MESSAGEm -> Const = ?Method;
.METHOD.extension-method.INFOm -> Const = ?Method;
.METHOD.extension-method.REFERm -> Const = ?Method;
.METHOD.extension-method.PUBLISHm -> Const = ?Method;
.METHOD.extension-method -> Const = ?Method, Extension, 20;

//
// -------------------------------------------------------------------------------[ .CREDENTIALS
//
.CREDENTIALS.Digest -> Const = ?<Credentials>.AuthScheme;
.CREDENTIALS.NTLM -> Const = ?<Credentials>.AuthScheme;
.CREDENTIALS.Kerberos -> Const = ?<Credentials>.AuthScheme;
.CREDENTIALS.TLS-DSK -> Const = ?<Credentials>.AuthScheme;
.CREDENTIALS.digest-response.dig-resp.username.username-value.quoted-string.qdtext -> Range = ?<Credentials>.Username;
.CREDENTIALS.digest-response.dig-resp.username.username-value.quoted-string.quoted-pair -> Range = ?<Credentials>.Username
.CREDENTIALS.digest-response.dig-resp.realm.realm-value.quoted-string.qdtext -> Range = ?<Credentials>.Realm;
.CREDENTIALS.digest-response.dig-resp.realm.realm-value.quoted-string.quoted-pair -> Range = ?<Credentials>.Realm;
.CREDENTIALS.msspi-response.msspi-resp.realm.realm-value.quoted-string.qdtext -> Range = ?<Credentials>.Realm;
.CREDENTIALS.msspi-response.msspi-resp.realm.realm-value.quoted-string.quoted-pair -> Range = ?<Credentials>.Realm;
.CREDENTIALS.digest-response.dig-resp.nonce.nonce-value.quoted-string.qdtext -> Range = ?<Credentials>.Nonce;
.CREDENTIALS.digest-response.dig-resp.nonce.nonce-value.quoted-string.quoted-pair -> Range = ?<Credentials>.Nonce;
.CREDENTIALS.digest-response.dig-resp.digest-uri.digest-uri-value -> Range = ?<Credentials>.DigestUri;
.CREDENTIALS.digest-response.dig-resp.dresponse.request-digest.LHEX -> Range = ?<Credentials>.Response;
.CREDENTIALS.digest-response.dig-resp.dresponse.EQUAL -> Bool = ?<Credentials>.HasResponse;
.CREDENTIALS.digest-response.dig-resp.algorithm.MD5 -> Const = ?<Credentials>.AuthAlgorithm;
.CREDENTIALS.digest-response.dig-resp.algorithm.MD5-sess -> Const = ?<Credentials>.AuthAlgorithm;
.CREDENTIALS.digest-response.dig-resp.algorithm.token -> Const = ?<Credentials>.AuthAlgorithm, Other, 20;
.CREDENTIALS.digest-response.dig-resp.cnonce.cnonce-value.nonce-value.quoted-string.qdtext -> Range = ?<Credentials>.Cnonce;
.CREDENTIALS.digest-response.dig-resp.cnonce.cnonce-value.nonce-value.quoted-string.quoted-pair -> Range = ?<Credentials>.Cnonce;
.CREDENTIALS.digest-response.dig-resp.opaque.quoted-string.qdtext -> Range = ?<Credentials>.Opaque;
.CREDENTIALS.digest-response.dig-resp.opaque.quoted-string.quoted-pair -> Range = ?<Credentials>.Opaque;
.CREDENTIALS.msspi-response.msspi-resp.opaque.quoted-string.qdtext -> Range = ?<Credentials>.Opaque;
.CREDENTIALS.msspi-response.msspi-resp.opaque.quoted-string.quoted-pair -> Range = ?<Credentials>.Opaque;
.CREDENTIALS.digest-response.dig-resp.message-qop.qop-value -> Range = ?<Credentials>.MessageQop;
.CREDENTIALS.msspi-response.msspi-resp.qop-options.qop-value -> Range = ?<Credentials>.MessageQop;
.CREDENTIALS.digest-response.dig-resp.nonce-count.nc-value.LHEX -> Hex = ?<Credentials>.NonceCount; Range = ?<Credentials>.NonceCountBytes;
.CREDENTIALS.msspi-response.msspi-resp.targetname.target-value.ntlm-target-val -> Range = ?<Credentials>.Targetname;
.CREDENTIALS.msspi-response.msspi-resp.targetname.target-value.kerberos-target-val -> Range = ?<Credentials>.Targetname;
.CREDENTIALS.msspi-response.msspi-resp.targetname.target-value.tls-dsk-target-val.token -> Range = ?<Credentials>.Targetname;
.CREDENTIALS.msspi-response.msspi-resp.version.version-value.DIGIT -> Decimal = ?<Credentials>.Version;
.CREDENTIALS.msspi-response.msspi-resp.gssapi-data.gssapi-data-value.quoted-string.qdtext -> Range = ?<Credentials>.GssapiData;
.CREDENTIALS.msspi-response.msspi-resp.gssapi-data.gssapi-data-value.quoted-string.quoted-pair -> Range = ?<Credentials>.GssapiData;
.CREDENTIALS.msspi-response.msspi-resp.gssapi-data.gssapi-data-value.quoted-string -> Bool = ?<Credentials>.HasGssapiData;
.CREDENTIALS.msspi-response.msspi-resp.crand.crand-val.LHEX -> Hex = ?<Credentials>.Crand;
.CREDENTIALS.msspi-response.msspi-resp.cnum.cnum-value.DIGIT -> Decimal = ?<Credentials>.Cnum;
.CREDENTIALS.msspi-response.msspi-resp.msspi-resp-data.msspi-resp-data-value.quoted-string.qdtext -> Range = ?<Credentials>.Response;
.CREDENTIALS.msspi-response.msspi-resp.msspi-resp-data.msspi-resp-data-value.quoted-string.quoted-pair -> Range = ?<Credentials>.Response;
.CREDENTIALS.msspi-response.msspi-resp.msspi-resp-data.msspi-resp-data-value.quoted-string -> Bool = ?<Credentials>.HasResponse;

//
// -------------------------------------------------------------------------------[ .CHALLENGE
//
.CHALLENGE.Digest -> Const = ?<Challenge>.AuthScheme;
.CHALLENGE.NTLM -> Const = ?<Challenge>.AuthScheme;
.CHALLENGE.Kerberos -> Const = ?<Challenge>.AuthScheme;
.CHALLENGE.TLS-DSK -> Const = ?<Challenge>.AuthScheme;
.CHALLENGE.digest-cln.realm.realm-value.quoted-string.qdtext -> Range = ?<Challenge>.Realm;
.CHALLENGE.digest-cln.realm.realm-value.quoted-string.quoted-pair -> Range = ?<Challenge>.Realm;
.CHALLENGE.digest-cln.nonce.nonce-value.quoted-string.qdtext -> Range = ?<Challenge>.Nonce;
.CHALLENGE.digest-cln.nonce.nonce-value.quoted-string.quoted-pair -> Range = ?<Challenge>.Nonce;
.CHALLENGE.digest-cln.opaque.quoted-string.qdtext -> Range = ?<Challenge>.Opaque;
.CHALLENGE.digest-cln.opaque.quoted-string.quoted-pair -> Range = ?<Challenge>.Opaque;
.CHALLENGE.digest-cln.stale.true -> Bool = ?<Challenge>.Stale;
.CHALLENGE.digest-cln.qop-options.qop-value -> Range = ?<Challenge>.Qop;
.CHALLENGE.digest-cln.algorithm.MD5 -> Const = ?<Challenge>.AuthAlgorithm;
.CHALLENGE.digest-cln.algorithm.MD5-sess -> Const = ?<Challenge>.AuthAlgorithm;
.CHALLENGE.digest-cln.algorithm.token -> Const = ?<Challenge>.AuthAlgorithm, Other, 20;

//
// -------------------------------------------------------------------------------[ Authorization
//
SIP-messageX.message-headerX.Authorization.HCOLON.: -> Count = AuthorizationCount, 10, -1;
SIP-messageX.message-headerX.Authorization.credentials -> Group = Authorization[AuthorizationCount], CREDENTIALS;

//
// -------------------------------------------------------------------------------[ Proxy-Authorization
//
SIP-messageX.message-headerX.Proxy-Authorization.HCOLON.: -> Count = ProxyAuthorizationCount, 10, -1;
SIP-messageX.message-headerX.Proxy-Authorization.credentials -> Group = ProxyAuthorization[ProxyAuthorizationCount], CREDENTIALS;

//
// -------------------------------------------------------------------------------[ WWW-Authenticate
//
SIP-messageX.message-headerX.WWW-Authenticate.HCOLON.: -> Count = WwwAuthenticateCount, 10, -1;
SIP-messageX.message-headerX.WWW-Authenticate.challenge -> Group = WwwAuthenticate[WwwAuthenticateCount], CHALLENGE;

//
// -------------------------------------------------------------------------------[ Proxy-Authenticate
//
SIP-messageX.message-headerX.Proxy-Authenticate.HCOLON.: -> Count = ProxyAuthenticateCount, 10, -1;
SIP-messageX.message-headerX.Proxy-Authenticate.challenge -> Group = ProxyAuthenticate[ProxyAuthenticateCount], CHALLENGE;

//
// -------------------------------------------------------------------------------[ From
//
SIP-messageX.message-headerX.From.from-spec -> Group = From, FROMTO;

//
// -------------------------------------------------------------------------------[ To
//
SIP-messageX.message-headerX.To -> Group = To, FROMTO;

//
// -------------------------------------------------------------------------------[ Request-Line
//
SIP-messageX.Request-Line.Method -> Group = , METHOD;
SIP-messageX.Request-Line.Request-URI -> Group = RequestUri, ADDRSPEC;
SIP-messageX.Request-Line.SIP-Version.DIGIT -> Decimal = SipVersion;

//
// -------------------------------------------------------------------------------[ Event
//
SIP-messageX.message-headerX.extension-header.Event.event-param.token -> LookupRange = Event.Id;
SIP-messageX.message-headerX.extension-header.Event.event-type -> LookupRange = Event.EventType;

//
// -------------------------------------------------------------------------------[ Headers
//
SIP-messageX.message-headerX.extension-header.header-name -> Range = Headers<Header>[HeaderCount].Name;
SIP-messageX.message-headerX.extension-header.header-value -> Range = Headers<Header>[HeaderCount].Value;
SIP-messageX.message-headerX.Accept.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Accept;
SIP-messageX.message-headerX.Accept-Encoding.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, AcceptEncoding;
SIP-messageX.message-headerX.Accept-Language.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, AcceptLanguage;
SIP-messageX.message-headerX.Alert-Info.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, AlertInfo;
SIP-messageX.message-headerX.Allow.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Allow;
SIP-messageX.message-headerX.Authentication-Info.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, AuthenticationInfo;
SIP-messageX.message-headerX.Authorization.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Authorization;
SIP-messageX.message-headerX.Call-ID.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, CallId;
SIP-messageX.message-headerX.Call-Info.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, CallInfo;
SIP-messageX.message-headerX.Content-Disposition.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ContentDisposition;
SIP-messageX.message-headerX.Content-Encoding.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ContentEncoding;
SIP-messageX.message-headerX.Content-Language.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ContentLanguage;
SIP-messageX.message-headerX.Content-Length.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ContentLength;
SIP-messageX.message-headerX.Content-Type.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ContentType;
SIP-messageX.message-headerX.CSeq.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, CSeq;
SIP-messageX.message-headerX.Date.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Date;
SIP-messageX.message-headerX.Error-Info.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ErrorInfo;
SIP-messageX.message-headerX.In-Reply-To.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, InReplyTo;
SIP-messageX.message-headerX.Max-Forwards.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, MaxForwards;
SIP-messageX.message-headerX.MIME-Version.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, MimeVersion;
SIP-messageX.message-headerX.Min-Expires.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, MinExpires;
SIP-messageX.message-headerX.Organization.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Organization;
SIP-messageX.message-headerX.Priority.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Priority;
SIP-messageX.message-headerX.Proxy-Authenticate.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ProxyAuthenticate;
SIP-messageX.message-headerX.Proxy-Authorization.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ProxyAuthorization;
SIP-messageX.message-headerX.Proxy-Require.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ProxyRequire;
SIP-messageX.message-headerX.Reply-To.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ReplyTo;
SIP-messageX.message-headerX.Require.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Require;
SIP-messageX.message-headerX.Retry-After.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, RetryAfter;
SIP-messageX.message-headerX.Server.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Server;
SIP-messageX.message-headerX.Subject.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Subject;
SIP-messageX.message-headerX.Supported.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Supported;
SIP-messageX.message-headerX.Timestamp.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Timestamp;
SIP-messageX.message-headerX.Unsupported.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Unsupported;
SIP-messageX.message-headerX.User-Agent.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, UserAgent;
SIP-messageX.message-headerX.Warning.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Warning;
SIP-messageX.message-headerX.WWW-Authenticate.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, WwwAuthenticate;
SIP-messageX.message-headerX.Contact.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Contact;
SIP-messageX.message-headerX.From.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, From;
SIP-messageX.message-headerX.Record-Route.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, RecordRoute;
SIP-messageX.message-headerX.Route.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Route;
SIP-messageX.message-headerX.To.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, To;
SIP-messageX.message-headerX.Via.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Via;
SIP-messageX.message-headerX.extension-header.Event.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Event;
SIP-messageX.message-headerX.extension-header.Allow-Events.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, AllowEvents;
SIP-messageX.message-headerX.extension-header.Subscription-State.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, SubscriptionState;
SIP-messageX.message-headerX.extension-header.Proxy-Authentication-Info.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, ProxyAuthenticationInfo;
SIP-messageX.message-headerX.extension-header.SIP-ETag.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, SipEtag;
SIP-messageX.message-headerX.extension-header.SIP-If-Match.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, SipIfMatch;
SIP-messageX.message-headerX.extension-header.HCOLON -> Const = Headers<Header>[HeaderCount].HeaderName, Extension, 20;
SIP-messageX.message-headerX.CRLF -> Count = HeaderCount, 200;

//
// -------------------------------------------------------------------------------[ Status-Line
//
SIP-messageX.Status-Line.SIP-Version.DIGIT -> Decimal = SipVersion;
SIP-messageX.Status-Line.Status-Code -> Decimal = StatusCode.Value;

//
// -------------------------------------------------------------------------------[ Contact
//
SIP-messageX.message-headerX.Contact.HCOLON.: -> Count = ContactCount, 25, -1;
SIP-messageX.message-headerX.Contact.COMMA., -> Count = ContactCount, 25, -1;
SIP-messageX.message-headerX.Contact.STAR.* -> Bool = Contact[ContactCount].IsStar;
SIP-messageX.message-headerX.Contact.contact-param.name-addr.addr-spec -> Group = Contact[ContactCount].AddrSpec2, ADDRSPEC;
SIP-messageX.message-headerX.Contact.contact-param.addr-spec -> Group = Contact[ContactCount].AddrSpec1, ADDRSPEC;
SIP-messageX.message-headerX.Contact.contact-param.contact-params.c-p-expires.delta-seconds.DIGIT -> Decimal = Contact[ContactCount].Expires;
SIP-messageX.message-headerX.Contact.contact-param.contact-params.c-p-instance.instance-val -> Range = Contact[ContactCount].SipInstance;
SIP-messageX.message-headerX.Contact.contact-param.contact-params.c-p-q.qvalue -> Range = Contact[ContactCount].Q;
SIP-messageX.message-headerX.Contact.contact-param -> Range = Contact[ContactCount].Value;

SIP-messageX.message-headerX.Contact.contact-param.SEMI.; -> Custom = Contact[ContactCount].ProxyReplace, End, "if(Var.End<0) Var.Begin=i-1;", ByteArrayPart;
SIP-messageX.message-headerX.Contact.contact-param.contact-params.c-p-proxy.replace -> Custom = Contact[ContactCount].ProxyReplace, End, "Var.End=i;";
SIP-messageX.message-headerX.Contact.contact-param.contact-params.contact-extension.generic-param.gen-value.token -> Custom = Contact[ContactCount].ProxyReplace, End, "if(Var.End==i-1) Var.End=int.MinValue;";

//
// -------------------------------------------------------------------------------[ Require
//
SIP-messageX.message-headerX.Require.HCOLON.: -> Count = RequireCount, 25, -1;
SIP-messageX.message-headerX.Require.COMMA., -> Count = RequireCount, 25, -1;
SIP-messageX.message-headerX.Require.option-tag -> LookupRange = Require[RequireCount];

//
// -------------------------------------------------------------------------------[ Proxy-Require
//
SIP-messageX.message-headerX.Proxy-Require.HCOLON.: -> Count = ProxyRequireCount, 25, -1;
SIP-messageX.message-headerX.Proxy-Require.COMMA., -> Count = ProxyRequireCount, 25, -1;
SIP-messageX.message-headerX.Proxy-Require.option-tag -> LookupRange = ProxyRequire[ProxyRequireCount];

//
// CSeq
//
SIP-messageX.message-headerX.CSeq.DIGIT -> Decimal = CSeq.Value;
SIP-messageX.message-headerX.CSeq.Method -> Group = CSeq., METHOD;

//
// -------------------------------------------------------------------------------[ Call-ID
//
SIP-messageX.message-headerX.Call-ID.callid -> LookupRange = CallId;


//
// Expires
//
SIP-messageX.message-headerX.Expires.delta-seconds.DIGIT -> Decimal = Expires;

//
// Min-Expires
//
SIP-messageX.message-headerX.Min-Expires.delta-seconds.DIGIT -> Decimal = MinExpires;

//
// Max-Forwards
//
SIP-messageX.message-headerX.Max-Forwards.DIGIT -> Decimal = MaxForwards;

//
// Date
//
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Mon -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Tue -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Wed -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Thu -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Fri -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Sat -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.wkday.Sun -> Const = Date.Wkday;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Jan -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Feb -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Mar -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Apr -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.May -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Jun -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Jul -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Aug -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Sep -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Oct -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Nov -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.month.Dec -> Const = Date.Month;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.date1.DIGIT -> Decimal = Date.DayYear;
SIP-messageX.message-headerX.Date.SIP-date.rfc1123-date.time.DIGIT -> Decimal = Date.Time;

//
// -------------------------------------------------------------------------------[ Via
//
SIP-messageX.message-headerX.Via.HCOLON.: -> Count = ViaCount, 25, -1; BeginRange = Via[ViaCount].CommaAndValue, AtEnd, 0;
SIP-messageX.message-headerX.Via.COMMA., -> Count = ViaCount, 25, -1; BeginRange = Via[ViaCount].CommaAndValue, AtEnd, -1;
SIP-messageX.message-headerX.Via.via-parm -> EndRange = Via[ViaCount].CommaAndValue;
SIP-messageX.message-headerX.Via.via-parm.sent-by.host -> Range = Via[ViaCount].SentBy.Host;
SIP-messageX.message-headerX.Via.via-parm.sent-by.port.DIGIT -> Decimal = Via[ViaCount].SentBy.Port;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-ttl.ttl.DIGIT -> Decimal = Via[ViaCount].Ttl;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-maddr.host -> Range = Via[ViaCount].Maddr;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-branch.token -> Range = Via[ViaCount].Branch;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-received.IPv4address -> Range = Via[ViaCount].Received;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-received.IPv6address -> Range = Via[ViaCount].Received;
SIP-messageX.message-headerX.Via.via-parm.sent-protocol.transport.UDP -> Const = Via[ViaCount].Transport;
SIP-messageX.message-headerX.Via.via-parm.sent-protocol.transport.TCP -> Const = Via[ViaCount].Transport;
SIP-messageX.message-headerX.Via.via-parm.sent-protocol.transport.TLS -> Const = Via[ViaCount].Transport;
SIP-messageX.message-headerX.Via.via-parm.sent-protocol.transport.SCTP -> Const = Via[ViaCount].Transport;
SIP-messageX.message-headerX.Via.via-parm.sent-protocol.transport.other-transport -> Const = Via[ViaCount].Transport, Other, 20;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-ms-received-port.port.DIGIT -> Decimal = Via[ViaCount].MsReceived.Port;
SIP-messageX.message-headerX.Via.via-parm.via-params.via-ms-received-cid.token -> Range = Via[ViaCount].MsReceived.Cid;

//
// -------------------------------------------------------------------------------[ Content-Type
//
SIP-messageX.message-headerX.Content-Type.media-type.m-type -> LookupRange = ContentType.Type;
SIP-messageX.message-headerX.Content-Type.media-type.m-subtype -> LookupRange = ContentType.Subtype;

//
// -------------------------------------------------------------------------------[ Content-Length
//
SIP-messageX.message-headerX.Content-Length.DIGIT -> Decimal = ContentLength;

//
// -------------------------------------------------------------------------------[ Route
//
SIP-messageX.message-headerX.Route.HCOLON.: -> Count = RouteCount, 25, -1; BeginRange = Route[RouteCount].CommaAndValue, AtEnd, 0;
SIP-messageX.message-headerX.Route.COMMA., -> Count = RouteCount, 25, -1; BeginRange = Route[RouteCount].CommaAndValue, AtEnd, -1;
SIP-messageX.message-headerX.Route.route-param -> EndRange = Route[RouteCount].CommaAndValue;
SIP-messageX.message-headerX.Route.route-param.name-addr.addr-spec -> Group = Route[RouteCount].AddrSpec, ADDRSPEC;

//
// -------------------------------------------------------------------------------[ Record-Route
//
SIP-messageX.message-headerX.Record-Route.HCOLON.: -> Count = RecordRouteCount, 25, -1; BeginRange = RecordRoute[RecordRouteCount].CommaAndValue, AtEnd, 0;
SIP-messageX.message-headerX.Record-Route.COMMA., -> Count = RecordRouteCount, 25, -1; BeginRange = RecordRoute[RecordRouteCount].CommaAndValue, AtEnd, -1;
SIP-messageX.message-headerX.Record-Route.rec-route -> EndRange = RecordRoute[RecordRouteCount].CommaAndValue;
SIP-messageX.message-headerX.Record-Route.rec-route.name-addr.addr-spec -> Group = RecordRoute[RecordRouteCount].AddrSpec, ADDRSPEC;

//
// -------------------------------------------------------------------------------[ Supported
//
SIP-messageX.message-headerX.Supported.HCOLON.: -> Count = SupportedCount, 25, -1;
SIP-messageX.message-headerX.Supported.COMMA., -> Count = SupportedCount, 25, -1;
SIP-messageX.message-headerX.Supported.option-tag -> LookupRange = Supported[SupportedCount].Option;

//
// -------------------------------------------------------------------------------[ SIP-ETag, SIP-If-Match
//
SIP-messageX.message-headerX.extension-header.SIP-ETag.entity-tag.token -> LookupRange = SipEtag;
SIP-messageX.message-headerX.extension-header.SIP-If-Match.entity-tag.token -> LookupRange = SipIfMatch;

//
// -------------------------------------------------------------------------------[ User-Agent
//
SIP-messageX.message-headerX.User-Agent.server-val.product.token -> LookupRange = UserAgent.Product;
SIP-messageX.message-headerX.User-Agent.server-val.product.product-version.token -> LookupRange = UserAgent.Version;

//
//
//
//////////////////////////////////////////////////////////////////////////////////[...............]
